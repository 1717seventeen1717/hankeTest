{"version":3,"sources":["PictureSelect.js","App.js","serviceWorker.js","index.js"],"names":["PictureSelect","props","hadleAll","state","arr","checkbox","document","getElementById","arrCheck","checked","pictures","map","item","push","id","setState","onChange","hadleCheck","e","value","indexOf","splice","values","this","className","type","onClick","src","url","React","Component","App","updateState","endValue","console","log","bind","name","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1e2edca.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nexport default class PictureSelect extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            arr : this.props.values\r\n        }\r\n    }\r\n    hadleAll = () =>{\r\n        const {arr} = this.state;\r\n        let checkbox = document.getElementById('checkInput');\r\n        let arrCheck = [];\r\n        if(!checkbox.checked){\r\n            this.setState({\r\n                arr:[]\r\n            })\r\n        }\r\n        else{\r\n            this.props.pictures.map(item=>{\r\n                arrCheck.push(item.id)\r\n            })\r\n            this.setState({\r\n                arr:arrCheck\r\n            })\r\n        }\r\n        this.props.onChange(arrCheck);\r\n    }\r\n    hadleCheck = (e,value) =>{\r\n        const { arr } = this.state;\r\n        if(arr.indexOf(value)!=-1){\r\n            arr.splice(arr.indexOf(arr.indexOf(value)), 1)\r\n        }\r\n        else{\r\n            arr.push(value);\r\n        }\r\n        this.setState({\r\n            arr\r\n        })\r\n        this.props.onChange(arr);\r\n    }\r\n    render() {\r\n        const {pictures} = this.props;\r\n        const {arr} = this.state;\r\n        return (\r\n             <div className = \"App\">\r\n                <div className=\"checkAll\">\r\n                    <input id=\"checkInput\" checked={arr.indexOf(pictures[0].id)!==-1&&arr.indexOf(pictures[1].id)!==-1&&arr.indexOf(pictures[2].id)!==-1?\"checked\":\"\"} onChange={this.hadleAll} type=\"checkbox\" value=\"a\" />\r\n                    已选中三个文件\r\n                </div>\r\n                <div className=\"checkThree\">\r\n                    <div className=\"checkDiv\">\r\n                        <input onClick={(e)=>this.hadleCheck(e,pictures[0].id)} className=\"checkbox\" checked= {arr.indexOf(pictures[0].id)!==-1?\"checked\":\"\"}  type=\"checkbox\" value={pictures[0].id} />\r\n                        <img src={pictures[0].url}/>\r\n                    </div>\r\n                    <div className=\"checkDiv\">\r\n                        <input onClick={(e)=>this.hadleCheck(e,pictures[1].id)} className=\"checkbox\" checked= {arr.indexOf(pictures[1].id)!==-1?\"checked\":\"\"} type=\"checkbox\" value={pictures[1].id}/>\r\n                        <img src={pictures[1].url}/>\r\n                    </div>\r\n                    <div className=\"checkDiv\">\r\n                        <input onClick={(e)=>this.hadleCheck(e,pictures[2].id)} className=\"checkbox\" checked= {arr.indexOf(pictures[2].id)!==-1?\"checked\":\"\"} type=\"checkbox\" value={pictures[2].id} />\r\n                        <img src={pictures[2].url}/>\r\n                    </div>\r\n                </div>\r\n             </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport PictureSelect from './PictureSelect';\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.updateState= this.updateState.bind(this);\n    this.state={\n      values:[]\n    }\n    this.pictures=[{\n      id: '1',\n      name: 'foo',\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n    },\n    {\n      id: '2',\n      name: 'foo',\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n    },\n    {\n      id: '3',\n      name: 'foo',\n      url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n    },]\n  }\n  updateState = (endValue) => {\n    this.setState({\n      values: endValue\n    },()=>{\n      console.log(this.state.values);\n    })\n  }\n  render(){\n    const {values} = this.state;\n    return(\n      <div className=\"App\">\n        <PictureSelect pictures={this.pictures} values={values} onChange={(endValue)=>this.updateState(endValue)}/>\n    </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}